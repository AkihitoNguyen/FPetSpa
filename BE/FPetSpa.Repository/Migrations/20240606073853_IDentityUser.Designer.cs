// <auto-generated />
using System;
using FPetSpa.Repository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FPetSpa.Repository.Migrations
{
    [DbContext(typeof(FpetSpaContext))]
    [Migration("20240606073853_IDentityUser")]
    partial class IDentityUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FPetSpa.Repository.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CartID");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserID");

                    b.HasKey("CartId")
                        .HasName("PK__Cart__51BCD797DA777D19");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.CartDetail", b =>
                {
                    b.Property<string>("CartId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("CartID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ProductID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__19093A2B8AF4DAEB");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.FeedBack", b =>
                {
                    b.Property<int>("FeedBackId")
                        .HasColumnType("int")
                        .HasColumnName("FeedBackID");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderID");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.HasKey("FeedBackId")
                        .HasName("PK__FeedBack__E2CB3867F03CCE73");

                    b.HasIndex("OrderId");

                    b.ToTable("FeedBack", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderID");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<DateOnly?>("RequiredDate")
                        .HasColumnType("date");

                    b.Property<string>("StaffId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StaffID");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(20, 2)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TransactionID");

                    b.Property<string>("VoucherId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("VoucherID");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__C3905BAFA501AA09");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.PaymentMethod", b =>
                {
                    b.Property<int>("MethodId")
                        .HasColumnType("int")
                        .HasColumnName("MethodID");

                    b.Property<string>("MethodApi")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("MethodAPI");

                    b.Property<string>("MethodName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("Tax")
                        .HasColumnType("float");

                    b.HasKey("MethodId")
                        .HasName("PK__PaymentM__FC681FB1702FF2C6");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Pet", b =>
                {
                    b.Property<int>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("PetID");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("PetGender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Pet Gender");

                    b.Property<string>("PetName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Pet Name");

                    b.Property<string>("PetType")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Pet Type");

                    b.Property<decimal?>("PetWeight")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("Pet Weight");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PetId")
                        .HasName("PK__Pet__48E538025416C034");

                    b.HasIndex("CustomerId");

                    b.ToTable("Pet", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ProductID");

                    b.Property<string>("CategoryId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("CategoryID");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductDescription")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductQuantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK__Product__B40CC6ED0BFF27D6");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.ProductOrderDetail", b =>
                {
                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderID");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ProductId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrderDetails");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Service", b =>
                {
                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("decimal(6, 3)");

                    b.Property<decimal?>("MinWeight")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ServiceName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("ServiceId")
                        .HasName("PK__Service__C51BB0EA9E942AE1");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.ServiceOrderDetail", b =>
                {
                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("OrderId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("OrderID");

                    b.Property<int?>("PetId")
                        .HasColumnType("int")
                        .HasColumnName("PetID");

                    b.Property<decimal?>("PetWeight")
                        .HasColumnType("decimal(5, 3)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("money");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ServiceID");

                    b.HasIndex("OrderId");

                    b.HasIndex("PetId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceOrderDetails");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Transaction", b =>
                {
                    b.Property<string>("TransactionId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("TransactionID");

                    b.Property<int?>("MethodId")
                        .HasColumnType("int")
                        .HasColumnName("MethodID");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("TransactionDate")
                        .HasColumnType("date");

                    b.HasKey("TransactionId")
                        .HasName("PK__Transact__55433A4B2FFCE86C");

                    b.HasIndex("MethodId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserID");

                    b.Property<string>("Address")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double?>("Coupon")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal?>("Phone")
                        .HasColumnType("decimal(10, 0)");

                    b.Property<string>("PictureName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Role")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCAC56E75DF9");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Voucher", b =>
                {
                    b.Property<string>("VoucherId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("VoucherID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("VoucherId")
                        .HasName("PK__Voucher__3AEE79C16E25274A");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Cart", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Cart.UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.CartDetail", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.Cart", "Cart")
                        .WithMany()
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_CartDetails.CartID");

                    b.HasOne("FPetSpa.Repository.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_CartDetails.ProductID");

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.FeedBack", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.Order", "Order")
                        .WithMany("FeedBacks")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_FeedBack.OrderID");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Order", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.User", "Customer")
                        .WithMany("OrderCustomers")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Order.CustomerID");

                    b.HasOne("FPetSpa.Repository.Data.User", "Staff")
                        .WithMany("OrderStaffs")
                        .HasForeignKey("StaffId")
                        .HasConstraintName("FK_Order.StaffID");

                    b.HasOne("FPetSpa.Repository.Data.Transaction", "Transaction")
                        .WithMany("Orders")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_Order.TransactionID");

                    b.HasOne("FPetSpa.Repository.Data.Voucher", "Voucher")
                        .WithMany("Orders")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK_Order.VoucherID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Transaction");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Pet", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.User", "Customer")
                        .WithMany("Pets")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Pet.CustomerID");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Product", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Product.CategoryID");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.ProductOrderDetail", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ProductOrderDetails.OrderID");

                    b.HasOne("FPetSpa.Repository.Data.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_ProductOrderDetails.ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.ServiceOrderDetail", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_ServiceOrderDetails.OrderID");

                    b.HasOne("FPetSpa.Repository.Data.Pet", "Pet")
                        .WithMany()
                        .HasForeignKey("PetId")
                        .HasConstraintName("FK_ServiceOrderDetails.PetID");

                    b.HasOne("FPetSpa.Repository.Data.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServiceOrderDetails.ServiceID");

                    b.Navigation("Order");

                    b.Navigation("Pet");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Transaction", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.PaymentMethod", "Method")
                        .WithMany("Transactions")
                        .HasForeignKey("MethodId")
                        .HasConstraintName("FK_Transactions.MethodID");

                    b.Navigation("Method");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FPetSpa.Repository.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FPetSpa.Repository.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Order", b =>
                {
                    b.Navigation("FeedBacks");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.PaymentMethod", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Transaction", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("OrderCustomers");

                    b.Navigation("OrderStaffs");

                    b.Navigation("Pets");
                });

            modelBuilder.Entity("FPetSpa.Repository.Data.Voucher", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
